# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run test:ci
    npm run test:inline-css
  displayName: 'npm install and test'

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: ./junit.xml
  displayName: 'Publish Test Results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
    failIfCoverageEmpty: true

#- script: |
#    docker build -t $(dockerId).azurecr.io/$(imageName):$(Build.BuildId) .
#    docker login -u $(acrServicePrincipalId) -p $(acrServicePrincipalPassword) $(dockerId).azurecr.io
#    docker push $(dockerId).azurecr.io/:$(Build.BuildId)
    

- task: Docker@2
  inputs:
    containerRegistry: 'RaymsImageHub'
    repository: '$(imageName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: $(Build.BuildId)

- task: Docker@2
  inputs:
    containerRegistry: 'RaymsImageHub'
    command: 'login'
    arguments: -u $(acrServicePrincipalId) -p $(acrServicePrincipalPassword) $(dockerId).azurecr.io

- task: Docker@2
  inputs:
    containerRegistry: 'RaymsImageHub'
    repository: '$(imageName)'
    command: 'push'
    tags: $(Build.BuildId)

  displayName: 'Build Docker image and publish on ACR'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
